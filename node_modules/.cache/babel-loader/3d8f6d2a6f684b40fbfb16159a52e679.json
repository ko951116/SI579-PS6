{"ast":null,"code":"var _jsxFileName = \"/Users/jiyoon/code/react-rhyme-finder/src/components/EventsListing.js\",\n    _s = $RefreshSig$();\n\n// import './EventsListing.css';\n// import EventDateTime from \"./EventDateTime\";\nimport EventInfo from \"./EventInfo\";\nimport EventInstance from \"./EventInstance\";\nimport StarredEvents from \"./StarredEvents\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EventsListing = props => {\n  _s();\n\n  const [starredEvents, setStarredEvents] = useState([]);\n  /**\n   * Creates an array where each item is the JSX \"markup\" for an event.\n   *\n   * @returns {*[]}\n   */\n\n  const generateEvents = () => {\n    // Initialize an empty array that will get each event\n    const eventsToShow = []; // Loop through the event list. Add each event as new array item.\n    // If React sees an array of JSX \"markup\", it will render each one.\n\n    props.events.forEach((eventInstance, index) => eventsToShow.push( /*#__PURE__*/_jsxDEV(EventInstance, {\n      setStarredEvents: setStarredEvents //will be passing down to EventInstance\n      ,\n      title: eventInstance.word,\n      children: /*#__PURE__*/_jsxDEV(EventInfo, {\n        title: eventInstance.word // description={eventInstance.description}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this)));\n    return eventsToShow;\n  };\n\n  function groupBy(objects, property) {\n    // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n    // value for property (obj[property])\n    if (typeof property !== 'function') {\n      const propName = property;\n\n      property = obj => obj[propName];\n    }\n\n    const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n\n    for (const object of objects) {\n      const groupName = property(object); //Make sure that the group exists\n\n      if (!groupedObjects.has(groupName)) {\n        groupedObjects.set(groupName, []);\n      }\n\n      groupedObjects.get(groupName).push(object);\n    } // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n\n\n    const result = {};\n\n    for (const key of Array.from(groupedObjects.keys()).sort()) {\n      result[key] = groupedObjects.get(key);\n    }\n\n    return result;\n  }\n\n  const length = Object.keys(groupBy(props.events, 'numSyllables')).length;\n\n  for (let m = 0; m < length; m++) {\n    console.log(Object.keys(groupBy(props.events, 'numSyllables'))[m]);\n  } //API 다운로딩할때 로딩화면\n\n\n  if (props.events.length > 0) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"events\",\n        children: generateEvents()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"events--loading\",\n      children: \"LOADING!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 16\n    }, this);\n  }\n};\n\n_s(EventsListing, \"Dq45SMenU2fujsvcnJLyxQYjdcY=\");\n\n_c = EventsListing;\nexport default EventsListing;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventsListing\");","map":{"version":3,"sources":["/Users/jiyoon/code/react-rhyme-finder/src/components/EventsListing.js"],"names":["EventInfo","EventInstance","StarredEvents","useState","EventsListing","props","starredEvents","setStarredEvents","generateEvents","eventsToShow","events","forEach","eventInstance","index","push","word","groupBy","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","result","key","Array","from","keys","sort","length","Object","m","console","log"],"mappings":"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","sourcesContent":["// import './EventsListing.css';\n// import EventDateTime from \"./EventDateTime\";\nimport EventInfo from \"./EventInfo\";\nimport EventInstance from \"./EventInstance\";\nimport StarredEvents from \"./StarredEvents\";\nimport {useState} from \"react\";\n\nconst EventsListing = (props) => {\n    const [starredEvents, setStarredEvents] = useState([])\n\n    /**\n     * Creates an array where each item is the JSX \"markup\" for an event.\n     *\n     * @returns {*[]}\n     */\n    const generateEvents = () => {\n        // Initialize an empty array that will get each event\n        const eventsToShow = [];\n\n        // Loop through the event list. Add each event as new array item.\n        // If React sees an array of JSX \"markup\", it will render each one.\n        props.events.forEach((eventInstance, index) =>\n            eventsToShow.push(\n                <EventInstance\n                    setStarredEvents = {setStarredEvents} //will be passing down to EventInstance\n                    key={index}\n                    title={eventInstance.word}\n                >\n                    <EventInfo\n                        title={eventInstance.word}\n                        // description={eventInstance.description}\n                    />\n                </EventInstance>\n            )\n        );\n        return eventsToShow;\n    }\n\n    function groupBy(objects, property) {\n        // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n        // value for property (obj[property])\n        if(typeof property !== 'function') {\n            const propName = property;\n            property = (obj) => obj[propName];\n        }\n\n        const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n        for(const object of objects) {\n            const groupName = property(object);\n            //Make sure that the group exists\n            if(!groupedObjects.has(groupName)) {\n                groupedObjects.set(groupName, []);\n            }\n            groupedObjects.get(groupName).push(object);\n        }\n\n        // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n        const result = {};\n        for(const key of Array.from(groupedObjects.keys()).sort()) {\n            result[key] = groupedObjects.get(key);\n        }\n        return result;\n    }\n\n\n    const length = Object.keys(groupBy(props.events, 'numSyllables')).length;\n\n    for (let m = 0; m<length; m++) {\n        console.log(Object.keys(groupBy(props.events, 'numSyllables'))[m])\n    }\n\n    //API 다운로딩할때 로딩화면\n    if (props.events.length > 0) {\n        return (\n            <>\n                {/*<StarredEvents starredList={starredEvents} />*/}\n                <div className='events'>\n                {generateEvents()}\n                {/*    {props.events.map((eventInstance, index) => (*/}\n                {/*        <li>*/}\n                {/*            {eventInstance.word}*/}\n                {/*            <button*/}\n                {/*                className=\"btn btn-sm btn-outline-success done\"*/}\n                {/*                type=\"button\"*/}\n                {/*                // onClick={remove}*/}\n                {/*            >*/}\n                {/*                (save)*/}\n                {/*            </button>*/}\n                {/*        </li>*/}\n                {/*        )*/}\n                {/*    )}*/}\n                </div>\n            </>\n        );\n    } else {\n        return <h2 className='events--loading'>LOADING!!</h2>\n    }\n\n}\n\nexport default EventsListing;"]},"metadata":{},"sourceType":"module"}