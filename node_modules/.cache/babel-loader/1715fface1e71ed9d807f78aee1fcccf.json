{"ast":null,"code":"var _jsxFileName = \"/Users/jiyoon/code/react-rhyme-finder/src/components/EventInstance.js\",\n    _s = $RefreshSig$();\n\n// import './EventInstance.css';\nimport EventStarButton from \"./EventStarButton\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EventInstance = props => {\n  _s();\n\n  const [isStarred, setIsStarred] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [props.children, /*#__PURE__*/_jsxDEV(EventStarButton // we send the value of isStarred to the child component\n    , {\n      tossedOverIsStarred: isStarred // we send the \"update state\" function to the child component\n      ,\n      handMeDownSetStarStateFunction: setIsStarred // setStarredEvents={props.setStarredEvents}\n      ,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EventInstance, \"Xfr8BHLw+FxkbT7jG0dxtKBxZUM=\");\n\n_c = EventInstance;\nexport default EventInstance;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventInstance\");","map":{"version":3,"sources":["/Users/jiyoon/code/react-rhyme-finder/src/components/EventInstance.js"],"names":["EventStarButton","useState","EventInstance","props","isStarred","setIsStarred","children"],"mappings":";;;AAAA;AACA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,SAAQC,QAAR,QAAuB,OAAvB;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AAEA,sBACI;AAAA,eACCE,KAAK,CAACG,QADP,eAEA,QAAC,eAAD,CACI;AADJ;AAEI,MAAA,mBAAmB,EAAEF,SAFzB,CAGI;AAHJ;AAII,MAAA,8BAA8B,EAAEC,YAJpC,CAKI;AALJ;AAAA,SAMSF;AANT;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CApBD;;GAAMD,a;;KAAAA,a;AAsBN,eAAeA,aAAf","sourcesContent":["// import './EventInstance.css';\nimport EventStarButton from \"./EventStarButton\";\nimport {useState} from \"react\";\n\nconst EventInstance = (props) => {\n    const [isStarred, setIsStarred] = useState(false);\n\n    return (\n        <li>\n        {props.children}\n        <EventStarButton\n            // we send the value of isStarred to the child component\n            tossedOverIsStarred={isStarred}\n            // we send the \"update state\" function to the child component\n            handMeDownSetStarStateFunction={setIsStarred}\n            // setStarredEvents={props.setStarredEvents}\n            { ...props} //spread operator\n            //one = {props.one}\n            //two = {props.one}\n            //and so on\n        />\n        </li>\n\n    )\n}\n\nexport default EventInstance;"]},"metadata":{},"sourceType":"module"}