{"ast":null,"code":"var _jsxFileName = \"/Users/jiyoon/code/react-rhyme-finder/src/components/InputGroup.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\"; // import {dateAndTimeToTimestamp} from \"../utils\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InputGroup = props => {\n  _s();\n\n  const {\n    setTodoItems\n  } = props;\n  const [taskDescription, setTaskDescription] = useState('');\n  const [rhymingWords, setRhymingWords] = useState([]);\n  const [synonyms, setSynonyms] = useState([]);\n  const [dueDate, setDueDate] = useState('');\n  const [dueTime, setDueTime] = useState('');\n\n  const addTask = () => {\n    setTodoItems(currentTodoItems => {\n      const updatedTodoItems = [{\n        task: taskDescription,\n        created: Date.now() // timestamp: dateAndTimeToTimestamp(dueDate, dueTime),\n\n      }, ...currentTodoItems];\n      localStorage.setItem('my-todo-items', JSON.stringify(updatedTodoItems));\n      return updatedTodoItems;\n    });\n    setTaskDescription('');\n    setDueDate('');\n    setDueTime('');\n  }; // const rhymingWords = umichEvents.map((eventInstance, index) =>\n  //     // console.log(eventInstance.event_title)\n  //     // eventName.push(eventInstance.event_title)\n  //     // setEventName([...eventsName])\n  //     // index = eventInstance.event_title\n  //\n  //     <li key={index}>{eventInstance.event_title}<button onClick={doneBtn}>Done</button></li>\n  // )\n\n\n  function showRhymingWordsBtn() {\n    console.log('hi');\n    setRhymingWords([...rhymingWords]);\n  }\n\n  function showSynonymsBtn() {\n    console.log('heee');\n    setSynonyms([...synonyms]);\n  }\n\n  const keyDownHandler = e => {\n    if (e.key === 'Enter') {\n      showRhymingWordsBtn();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-group\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: taskDescription,\n      onChange: e => setTaskDescription(e.target.value),\n      className: \"form-control w-25\",\n      type: \"text\",\n      placeholder: \"Enter a word\",\n      \"aria-label\": \"Enter a word\",\n      onKeyDown: keyDownHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: showRhymingWordsBtn,\n      className: \"btn btn-primary\",\n      \"aria-label\": \"Show rhyming words\",\n      children: \"Show rhyming words\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: showSynonymsBtn,\n      className: \"btn btn-secondary\",\n      \"aria-label\": \"Show synonyms\",\n      children: \"Show synonyms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InputGroup, \"8gVBAxwlaPDaSwYxCUVBRvNP/ak=\");\n\n_c = InputGroup;\nexport default InputGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputGroup\");","map":{"version":3,"sources":["/Users/jiyoon/code/react-rhyme-finder/src/components/InputGroup.js"],"names":["useState","InputGroup","props","setTodoItems","taskDescription","setTaskDescription","rhymingWords","setRhymingWords","synonyms","setSynonyms","dueDate","setDueDate","dueTime","setDueTime","addTask","currentTodoItems","updatedTodoItems","task","created","Date","now","localStorage","setItem","JSON","stringify","showRhymingWordsBtn","console","log","showSynonymsBtn","keyDownHandler","e","key","target","value"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB,C,CACA;;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM;AAACC,IAAAA;AAAD,MAAiBD,KAAvB;AAEA,QAAM,CAACE,eAAD,EAAkBC,kBAAlB,IAAwCL,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMc,OAAO,GAAG,MAAM;AAClBX,IAAAA,YAAY,CAAEY,gBAAD,IAAsB;AAC/B,YAAMC,gBAAgB,GAAI,CACtB;AACIC,QAAAA,IAAI,EAAEb,eADV;AAEIc,QAAAA,OAAO,EAAEC,IAAI,CAACC,GAAL,EAFb,CAGI;;AAHJ,OADsB,EAMtB,GAAGL,gBANmB,CAA1B;AAQAM,MAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCC,IAAI,CAACC,SAAL,CAAeR,gBAAf,CAAtC;AACA,aAAOA,gBAAP;AACH,KAXW,CAAZ;AAYAX,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAM,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,IAAAA,UAAU,CAAC,EAAD,CAAV;AACH,GAhBD,CAV0B,CA4B1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,WAASY,mBAAT,GAA+B;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACApB,IAAAA,eAAe,CAAC,CAAC,GAAGD,YAAJ,CAAD,CAAf;AACH;;AACD,WAASsB,eAAT,GAA2B;AACvBF,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAlB,IAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,CAAD,CAAX;AACH;;AAED,QAAMqB,cAAc,GAAIC,CAAD,IAAO;AAC1B,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AACnBN,MAAAA,mBAAmB;AACtB;AACJ,GAJD;;AAMA,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACI;AACI,MAAA,KAAK,EAAErB,eADX;AAEI,MAAA,QAAQ,EAAG0B,CAAD,IAAOzB,kBAAkB,CAACyB,CAAC,CAACE,MAAF,CAASC,KAAV,CAFvC;AAGI,MAAA,SAAS,EAAC,mBAHd;AAII,MAAA,IAAI,EAAC,MAJT;AAKI,MAAA,WAAW,EAAC,cALhB;AAMI,oBAAW,cANf;AAOI,MAAA,SAAS,EAAEJ;AAPf;AAAA;AAAA;AAAA;AAAA,YADJ,eAUI;AACI,MAAA,OAAO,EAAEJ,mBADb;AAEI,MAAA,SAAS,EAAC,iBAFd;AAGI,oBAAW,oBAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ,eAgBI;AACI,MAAA,OAAO,EAAEG,eADb;AAEI,MAAA,SAAS,EAAC,mBAFd;AAGI,oBAAW,eAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH,CA9ED;;GAAM3B,U;;KAAAA,U;AAgFN,eAAeA,UAAf","sourcesContent":["import {useState} from \"react\";\n// import {dateAndTimeToTimestamp} from \"../utils\";\n\nconst InputGroup = (props) => {\n    const {setTodoItems} = props;\n\n    const [taskDescription, setTaskDescription] = useState('');\n    const [rhymingWords, setRhymingWords] = useState([])\n    const [synonyms, setSynonyms] = useState([])\n\n    const [dueDate, setDueDate] = useState('');\n    const [dueTime, setDueTime] = useState('');\n\n    const addTask = () => {\n        setTodoItems((currentTodoItems) => {\n            const updatedTodoItems =  [\n                {\n                    task: taskDescription,\n                    created: Date.now(),\n                    // timestamp: dateAndTimeToTimestamp(dueDate, dueTime),\n                },\n                ...currentTodoItems,\n            ];\n            localStorage.setItem('my-todo-items', JSON.stringify(updatedTodoItems));\n            return updatedTodoItems;\n        });\n        setTaskDescription('');\n        setDueDate('');\n        setDueTime('');\n    }\n\n    // const rhymingWords = umichEvents.map((eventInstance, index) =>\n    //     // console.log(eventInstance.event_title)\n    //     // eventName.push(eventInstance.event_title)\n    //     // setEventName([...eventsName])\n    //     // index = eventInstance.event_title\n    //\n    //     <li key={index}>{eventInstance.event_title}<button onClick={doneBtn}>Done</button></li>\n    // )\n\n\n    function showRhymingWordsBtn() {\n        console.log('hi')\n        setRhymingWords([...rhymingWords])\n    }\n    function showSynonymsBtn() {\n        console.log('heee')\n        setSynonyms([...synonyms])\n    }\n\n    const keyDownHandler = (e) => {\n        if (e.key === 'Enter') {\n            showRhymingWordsBtn()\n        }\n    }\n\n    return(\n        <div className=\"input-group\">\n            <input\n                value={taskDescription}\n                onChange={(e) => setTaskDescription(e.target.value)}\n                className=\"form-control w-25\"\n                type=\"text\"\n                placeholder=\"Enter a word\"\n                aria-label=\"Enter a word\"\n                onKeyDown={keyDownHandler}/>\n\n            <button\n                onClick={showRhymingWordsBtn}\n                className=\"btn btn-primary\"\n                aria-label=\"Show rhyming words\">\n                Show rhyming words\n            </button>\n            <button\n                onClick={showSynonymsBtn}\n                className=\"btn btn-secondary\"\n                aria-label=\"Show synonyms\">\n                Show synonyms\n            </button>\n        </div>\n    )\n}\n\nexport default InputGroup;"]},"metadata":{},"sourceType":"module"}