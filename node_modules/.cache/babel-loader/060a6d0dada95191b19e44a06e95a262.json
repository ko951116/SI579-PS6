{"ast":null,"code":"var _jsxFileName = \"/Users/jiyoon/code/react-rhyme-finder/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState, useEffect } from \"react\";\nimport InputGroup from \"./components/InputGroup\";\nimport TodoItem from \"./components/TodoItem\";\nimport EventsListing from \"./components/EventsListing\";\nimport StarredEvents from \"./components/StarredEvents\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  let defaultTodoItems = [{\n    task: 'laundry',\n    created: 1647999964830\n  }];\n  const [umichEvents, setUmichEvents] = useState([]);\n  const [todoItems, setTodoItems] = useState(defaultTodoItems);\n  const [starredEvents, setStarredEvents] = useState([]);\n\n  const removeTodoItem = created => {\n    setTodoItems(previousTodoItems => {\n      // Keep all items that dont match `timestamp`.\n      const withItemRemoved = previousTodoItems.filter(item => {\n        return item.created !== created;\n      });\n      localStorage.setItem('my-todo-items', JSON.stringify(withItemRemoved));\n      return withItemRemoved;\n    });\n  };\n\n  function showRhymingWordsBtn() {\n    fetch('api.datamuse.com/words?rel_rhy=forgetful').then(response => response.json()).then(json => setUmichEvents(Object.values(json)));\n  } // useEffect(() => {\n  //\n  // }, []);\n\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"row\",\n      children: \"React Rhyme Finder (579 Problem Set 6)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(StarredEvents, {\n      starredList: starredEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        // value={taskDescription}\n        // onChange={(e) => setTaskDescription(e.target.value)}\n        className: \"form-control w-25\",\n        type: \"text\",\n        placeholder: \"Enter a word\",\n        \"aria-label\": \"Enter a word\" // onKeyDown={keyDownHandler}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => showRhymingWordsBtn(),\n        className: \"btn btn-primary\",\n        \"aria-label\": \"Show rhyming words\",\n        children: \"Show rhyming words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        // onClick={showSynonymsBtn}\n        className: \"btn btn-secondary\",\n        \"aria-label\": \"Show synonyms\",\n        children: \"Show synonyms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"row\",\n      children: umichEvents.map(item => /*#__PURE__*/_jsxDEV(EventsListing, {\n        events: umichEvents // task={item.task}\n        // timestamp={item.timestamp}\n        // created={item.created}\n        // key={item.created}\n        // remove={() => removeTodoItem(item.created)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"NezfjDReYf/lSUM3tl9/vbbo86Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jiyoon/code/react-rhyme-finder/src/App.js"],"names":["logo","useState","useEffect","InputGroup","TodoItem","EventsListing","StarredEvents","App","defaultTodoItems","task","created","umichEvents","setUmichEvents","todoItems","setTodoItems","starredEvents","setStarredEvents","removeTodoItem","previousTodoItems","withItemRemoved","filter","item","localStorage","setItem","JSON","stringify","showRhymingWordsBtn","fetch","then","response","json","Object","values","map"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AACX,MAAIC,gBAAgB,GAAG,CACnB;AACIC,IAAAA,IAAI,EAAE,SADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GADmB,CAAvB;AAMA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAACO,gBAAD,CAA1C;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD;;AAGA,QAAMgB,cAAc,GAAIP,OAAD,IAAa;AAChCI,IAAAA,YAAY,CAAEI,iBAAD,IAAuB;AAChC;AACA,YAAMC,eAAe,GAAGD,iBAAiB,CAACE,MAAlB,CAA0BC,IAAD,IAAU;AACvD,eAAOA,IAAI,CAACX,OAAL,KAAiBA,OAAxB;AACH,OAFuB,CAAxB;AAGAY,MAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCC,IAAI,CAACC,SAAL,CAAeN,eAAf,CAAtC;AAEA,aAAOA,eAAP;AACH,KARW,CAAZ;AASH,GAVD;;AAYA,WAASO,mBAAT,GAAgC;AAC5BC,IAAAA,KAAK,CAAC,0CAAD,CAAL,CACKC,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EAEKF,IAFL,CAEWE,IAAD,IAAUlB,cAAc,CAACmB,MAAM,CAACC,MAAP,CAAcF,IAAd,CAAD,CAFlC;AAGH,GA7BU,CA+BX;AACA;AACA;;;AAEA,sBACE;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAOI,QAAC,aAAD;AAAe,MAAA,WAAW,EAAEf;AAA5B;AAAA;AAAA;AAAA;AAAA,YAPJ,eAaI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACI;AACI;AACA;AACA,QAAA,SAAS,EAAC,mBAHd;AAII,QAAA,IAAI,EAAC,MAJT;AAKI,QAAA,WAAW,EAAC,cALhB;AAMI,sBAAW,cANf,CAOI;;AAPJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAUI;AACI,QAAA,OAAO,EAAE,MAAMW,mBAAmB,EADtC;AAEI,QAAA,SAAS,EAAC,iBAFd;AAGI,sBAAW,oBAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ,eAgBI;AACI;AACA,QAAA,SAAS,EAAC,mBAFd;AAGI,sBAAW,eAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ,eAoDE;AAAI,MAAA,SAAS,EAAC,KAAd;AAAA,gBACGf,WAAW,CAACsB,GAAZ,CAAiBZ,IAAD,iBACb,QAAC,aAAD;AAAe,QAAA,MAAM,EAAEV,WAAvB,CACI;AACA;AACA;AACA;AACA;;AALJ;AAAA;AAAA;AAAA;AAAA,cADH;AADH;AAAA;AAAA;AAAA;AAAA,YApDF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkEH;;GArGQJ,G;;KAAAA,G;AAuGT,eAAeA,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport {useState, useEffect} from \"react\";\nimport InputGroup from \"./components/InputGroup\";\nimport TodoItem from \"./components/TodoItem\";\nimport EventsListing from \"./components/EventsListing\";\nimport StarredEvents from \"./components/StarredEvents\";\n\n\n\nfunction App() {\n    let defaultTodoItems = [\n        {\n            task: 'laundry',\n            created: 1647999964830,\n        }\n    ];\n    const [umichEvents, setUmichEvents] = useState([]);\n\n    const [todoItems, setTodoItems] = useState(defaultTodoItems);\n    const [starredEvents, setStarredEvents] = useState([])\n\n\n    const removeTodoItem = (created) => {\n        setTodoItems((previousTodoItems) => {\n            // Keep all items that dont match `timestamp`.\n            const withItemRemoved = previousTodoItems.filter((item) => {\n                return item.created !== created\n            });\n            localStorage.setItem('my-todo-items', JSON.stringify(withItemRemoved));\n\n            return withItemRemoved;\n        });\n    }\n\n    function showRhymingWordsBtn () {\n        fetch('api.datamuse.com/words?rel_rhy=forgetful')\n            .then((response) => response.json())\n            .then((json) => setUmichEvents(Object.values(json)));\n    }\n\n    // useEffect(() => {\n    //\n    // }, []);\n\n    return (\n      <main className=\"container\">\n        <h1 className=\"row\">React Rhyme Finder (579 Problem Set 6)</h1>\n\n          {/*<div className=\"row\">*/}\n          {/*    <div className=\"col\">Saved words: <span></span></div>*/}\n          {/*</div>*/}\n\n          <StarredEvents starredList={starredEvents} />\n\n          {/*<section>*/}\n          {/*  <InputGroup setTodoItems = {setTodoItems} />*/}\n          {/*</section>*/}\n\n          <div className=\"input-group\">\n              <input\n                  // value={taskDescription}\n                  // onChange={(e) => setTaskDescription(e.target.value)}\n                  className=\"form-control w-25\"\n                  type=\"text\"\n                  placeholder=\"Enter a word\"\n                  aria-label=\"Enter a word\"\n                  // onKeyDown={keyDownHandler}\n                  />\n              <button\n                  onClick={() => showRhymingWordsBtn()}\n                  className=\"btn btn-primary\"\n                  aria-label=\"Show rhyming words\">\n                  Show rhyming words\n              </button>\n              <button\n                  // onClick={showSynonymsBtn}\n                  className=\"btn btn-secondary\"\n                  aria-label=\"Show synonyms\">\n                  Show synonyms\n              </button>\n          </div>\n\n          {/*<div className=\"row\">*/}\n          {/*    <div className=\"input-group col\">*/}\n          {/*        <input className=\"form-control\" type=\"text\" placeholder=\"Enter a word\" id=\"word_input\"/>*/}\n          {/*        <button id=\"show_rhymes\" type=\"button\" className=\"btn btn-primary\">Show rhyming words</button>*/}\n          {/*        <button id=\"show_synonyms\" type=\"button\" className=\"btn btn-secondary\">Show synonyms</button>*/}\n          {/*    </div>*/}\n          {/*</div>*/}\n\n          {/*<div className=\"row\">*/}\n          {/*    <h2 className=\"col\"></h2>*/}\n          {/*</div>*/}\n          {/*<div className=\"output row\">*/}\n          {/*    <output className=\"col\"></output>*/}\n          {/*</div>*/}\n\n        <ul className=\"row\">\n          {umichEvents.map((item) =>\n              <EventsListing events={umichEvents}\n                  // task={item.task}\n                  // timestamp={item.timestamp}\n                  // created={item.created}\n                  // key={item.created}\n                  // remove={() => removeTodoItem(item.created)}\n              />\n          )}\n        </ul>\n      </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}