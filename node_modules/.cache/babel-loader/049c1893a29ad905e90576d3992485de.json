{"ast":null,"code":"var _jsxFileName = \"/Users/jiyoon/code/react-rhyme-finder/src/components/EventsListing.js\",\n    _s = $RefreshSig$();\n\n// import './EventsListing.css';\n// import EventDateTime from \"./EventDateTime\";\nimport EventInfo from \"./EventInfo\";\nimport EventInstance from \"./EventInstance\";\nimport StarredEvents from \"./StarredEvents\";\nimport { useState } from \"react\";\nimport NumSyllableGroup from \"./NumSyllableGroup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EventsListing = props => {\n  _s();\n\n  const [starredEvents, setStarredEvents] = useState([]);\n\n  const group = () => {\n    const groupNum = [];\n  };\n\n  function groupBy(objects, property) {\n    // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n    // value for property (obj[property])\n    if (typeof property !== 'function') {\n      const propName = property;\n\n      property = obj => obj[propName];\n    }\n\n    const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n\n    for (const object of objects) {\n      const groupName = property(object); //Make sure that the group exists\n\n      if (!groupedObjects.has(groupName)) {\n        groupedObjects.set(groupName, []);\n      }\n\n      groupedObjects.get(groupName).push(object);\n    } // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n\n\n    const result = {};\n\n    for (const key of Array.from(groupedObjects.keys()).sort()) {\n      result[key] = groupedObjects.get(key);\n    }\n\n    return result;\n  }\n\n  const generateEvents = () => {\n    // Initialize an empty array that will get each event\n    const groupby = groupBy(props.events, 'numSyllables');\n    const length = Object.keys(groupby).length; // for (let m = 0 ; m<length; m++) {\n    //     console.log('Syllable: ', Object.keys(groupby)[m])\n    //     // console.log(Object.keys(groupBy(props.events, 'numSyllables')))\n    //     for (let item in groupby[Object.keys(groupby)[m]]) {\n    //         console.log(groupby[Object.keys(groupby)[m]][item])\n    //     }\n    // }\n\n    const eventsToShow = [];\n\n    for (let n = 0; n < length; n++) {\n      // for (let item in groupby[Object.keys(groupby)[n]]) {\n      //     console.log(groupby[Object.keys(groupby)[n]][item])\n      // }\n      groupby[Object.keys(groupby)[n]].forEach((eventInstance, index) => eventsToShow.push( /*#__PURE__*/_jsxDEV(EventInstance, {\n        setStarredEvents: setStarredEvents //will be passing down to EventInstance\n        ,\n        title: eventInstance.word,\n        children: /*#__PURE__*/_jsxDEV(EventInfo, {\n          title: eventInstance.word // description={eventInstance.description}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this)\n      }, eventInstance.word, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this)));\n    } // Loop through the event list. Add each event as new array item.\n    // If React sees an array of JSX \"markup\", it will render each one.\n    // props.events.forEach((eventInstance, index) =>\n    //     eventsToShow.push(\n    //         <EventInstance\n    //             setStarredEvents = {setStarredEvents} //will be passing down to EventInstance\n    //             key={index}\n    //             title={eventInstance.word}\n    //         >\n    //             <EventInfo\n    //                 title={eventInstance.word}\n    //                 // description={eventInstance.description}\n    //             />\n    //         </EventInstance>\n    //     )\n    // );\n    // for (let i=0; i<length; i++) {\n    //     return eventsToShow[i]\n    // }\n\n\n    return eventsToShow;\n  };\n  /**\n   * Creates an array where each item is the JSX \"markup\" for an event.\n   *\n   * @returns {*[]}\n   */\n  //API 다운로딩할때 로딩화면\n  // for (let count=1; count<Object.keys(groupBy(props.events, 'numSyllables')).length; count++) {\n  //     return (\n  //         <>\n  //             <h2>Syllables: {j}</h2>\n  //             {generateEvents()}\n  //         </>\n  //     )\n  // }\n\n\n  for (let j = 0; j < 3; j++) {\n    console.log(j); // return <h2>{j}</h2>;\n  } // return (\n  //     <>\n  //         <StarredEvents starredList={starredEvents} />\n  //\n  //         <div className='events'>\n  //             <h2>Syllables:  {generateEvents()}</h2>\n  //\n  //             {/*    {props.events.map((eventInstance, index) => (*/}\n  //             {/*        <li>*/}\n  //             {/*            {eventInstance.word}*/}\n  //             {/*            <button*/}\n  //             {/*                className=\"btn btn-sm btn-outline-success done\"*/}\n  //             {/*                type=\"button\"*/}\n  //             {/*                // onClick={remove}*/}\n  //             {/*            >*/}\n  //             {/*                (save)*/}\n  //             {/*            </button>*/}\n  //             {/*        </li>*/}\n  //             {/*        )*/}\n  //             {/*    )}*/}\n  //         </div>\n  //     </>\n  // );\n\n};\n\n_s(EventsListing, \"Dq45SMenU2fujsvcnJLyxQYjdcY=\");\n\n_c = EventsListing;\nexport default EventsListing;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventsListing\");","map":{"version":3,"sources":["/Users/jiyoon/code/react-rhyme-finder/src/components/EventsListing.js"],"names":["EventInfo","EventInstance","StarredEvents","useState","NumSyllableGroup","EventsListing","props","starredEvents","setStarredEvents","group","groupNum","groupBy","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","push","result","key","Array","from","keys","sort","generateEvents","groupby","events","length","Object","eventsToShow","n","forEach","eventInstance","index","word","j","console","log"],"mappings":"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","sourcesContent":["// import './EventsListing.css';\n// import EventDateTime from \"./EventDateTime\";\nimport EventInfo from \"./EventInfo\";\nimport EventInstance from \"./EventInstance\";\nimport StarredEvents from \"./StarredEvents\";\nimport {useState} from \"react\";\nimport NumSyllableGroup from \"./NumSyllableGroup\";\n\nconst EventsListing = (props) => {\n    const [starredEvents, setStarredEvents] = useState([])\n\n    const group = () => {\n        const groupNum = [];\n    }\n\n    function groupBy(objects, property) {\n        // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n        // value for property (obj[property])\n        if(typeof property !== 'function') {\n            const propName = property;\n            property = (obj) => obj[propName];\n        }\n\n        const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n        for(const object of objects) {\n            const groupName = property(object);\n            //Make sure that the group exists\n            if(!groupedObjects.has(groupName)) {\n                groupedObjects.set(groupName, []);\n            }\n            groupedObjects.get(groupName).push(object);\n        }\n\n        // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n        const result = {};\n        for(const key of Array.from(groupedObjects.keys()).sort()) {\n            result[key] = groupedObjects.get(key);\n        }\n        return result;\n    }\n\n    const generateEvents = () => {\n        // Initialize an empty array that will get each event\n\n\n        const groupby = groupBy(props.events, 'numSyllables')\n        const length = Object.keys(groupby).length;\n\n\n        // for (let m = 0 ; m<length; m++) {\n        //     console.log('Syllable: ', Object.keys(groupby)[m])\n        //     // console.log(Object.keys(groupBy(props.events, 'numSyllables')))\n        //     for (let item in groupby[Object.keys(groupby)[m]]) {\n        //         console.log(groupby[Object.keys(groupby)[m]][item])\n        //     }\n        // }\n\n\n\n       const eventsToShow = [];\n\n        for (let n=0; n<length; n++) {\n            // for (let item in groupby[Object.keys(groupby)[n]]) {\n            //     console.log(groupby[Object.keys(groupby)[n]][item])\n            // }\n            groupby[Object.keys(groupby)[n]].forEach((eventInstance, index) =>\n\n                eventsToShow.push(\n                    <EventInstance\n                        setStarredEvents = {setStarredEvents} //will be passing down to EventInstance\n                        key={eventInstance.word}\n                        title={eventInstance.word}\n                    >\n                        <EventInfo\n                            title={eventInstance.word}\n                            // description={eventInstance.description}\n                        />\n                    </EventInstance>\n                )\n            )\n        }\n\n        // Loop through the event list. Add each event as new array item.\n        // If React sees an array of JSX \"markup\", it will render each one.\n        // props.events.forEach((eventInstance, index) =>\n        //     eventsToShow.push(\n        //         <EventInstance\n        //             setStarredEvents = {setStarredEvents} //will be passing down to EventInstance\n        //             key={index}\n        //             title={eventInstance.word}\n        //         >\n        //             <EventInfo\n        //                 title={eventInstance.word}\n        //                 // description={eventInstance.description}\n        //             />\n        //         </EventInstance>\n        //     )\n        // );\n\n        // for (let i=0; i<length; i++) {\n        //     return eventsToShow[i]\n        // }\n        return eventsToShow;\n    }\n\n\n    /**\n     * Creates an array where each item is the JSX \"markup\" for an event.\n     *\n     * @returns {*[]}\n     */\n\n\n\n    //API 다운로딩할때 로딩화면\n\n    // for (let count=1; count<Object.keys(groupBy(props.events, 'numSyllables')).length; count++) {\n    //     return (\n    //         <>\n    //             <h2>Syllables: {j}</h2>\n    //             {generateEvents()}\n    //         </>\n    //     )\n    // }\n\n    for (let j=0 ;j<3; j++) {\n        console.log(j)\n        // return <h2>{j}</h2>;\n    }\n\n        // return (\n        //     <>\n        //         <StarredEvents starredList={starredEvents} />\n        //\n        //         <div className='events'>\n        //             <h2>Syllables:  {generateEvents()}</h2>\n        //\n        //             {/*    {props.events.map((eventInstance, index) => (*/}\n        //             {/*        <li>*/}\n        //             {/*            {eventInstance.word}*/}\n        //             {/*            <button*/}\n        //             {/*                className=\"btn btn-sm btn-outline-success done\"*/}\n        //             {/*                type=\"button\"*/}\n        //             {/*                // onClick={remove}*/}\n        //             {/*            >*/}\n        //             {/*                (save)*/}\n        //             {/*            </button>*/}\n        //             {/*        </li>*/}\n        //             {/*        )*/}\n        //             {/*    )}*/}\n        //         </div>\n        //     </>\n        // );\n\n\n}\n\nexport default EventsListing;"]},"metadata":{},"sourceType":"module"}