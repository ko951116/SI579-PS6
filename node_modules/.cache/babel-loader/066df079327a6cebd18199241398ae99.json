{"ast":null,"code":"var _jsxFileName = \"/Users/jiyoon/code/react-rhyme-finder/src/components/EventsListing.js\",\n    _s = $RefreshSig$();\n\nimport './EventsListing.css'; // import EventDateTime from \"./EventDateTime\";\n// import EventInfo from \"./EventInfo\";\n// import EventInstance from \"./EventInstance\";\n\nimport StarredEvents from \"./StarredEvents\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EventsListing = props => {\n  _s();\n\n  const [starredEvents, setStarredEvents] = useState([]);\n  /**\n   * Creates an array where each item is the JSX \"markup\" for an event.\n   *\n   * @returns {*[]}\n   */\n\n  const generateEvents = () => {\n    // Initialize an empty array that will get each event\n    const eventsToShow = []; // Loop through the event list. Add each event as new array item.\n    // If React sees an array of JSX \"markup\", it will render each one.\n\n    props.events.forEach((eventInstance, index) => eventsToShow.push( /*#__PURE__*/_jsxDEV(EventInstance, {\n      setStarredEvents: setStarredEvents //will be passing down to EventInstance\n      ,\n      title: eventInstance.event_title,\n      children: [/*#__PURE__*/_jsxDEV(EventDateTime, {\n        dateStart: eventInstance.date_start,\n        timeStart: eventInstance.time_start,\n        timeEnd: eventInstance.time_end\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(EventInfo, {\n        title: eventInstance.event_title,\n        description: eventInstance.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }, this)));\n    return eventsToShow;\n  }; //API 다운로딩할때 로딩화면\n\n\n  if (props.events.length > 0) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(StarredEvents, {\n        starredList: starredEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"events\",\n        children: generateEvents()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"events--loading\",\n      children: \"LOADING!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this);\n  }\n};\n\n_s(EventsListing, \"Dq45SMenU2fujsvcnJLyxQYjdcY=\");\n\n_c = EventsListing;\nexport default EventsListing;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventsListing\");","map":{"version":3,"sources":["/Users/jiyoon/code/react-rhyme-finder/src/components/EventsListing.js"],"names":["StarredEvents","useState","EventsListing","props","starredEvents","setStarredEvents","generateEvents","eventsToShow","events","forEach","eventInstance","index","push","event_title","date_start","time_start","time_end","description","length"],"mappings":";;;AAAA,OAAO,qBAAP,C,CACA;AACA;AACA;;AACA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,SAAQC,QAAR,QAAuB,OAAvB;;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAE7B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,EAAD,CAAlD;AAEA;AACJ;AACA;AACA;AACA;;AACI,QAAMK,cAAc,GAAG,MAAM;AACzB;AACA,UAAMC,YAAY,GAAG,EAArB,CAFyB,CAIzB;AACA;;AACAJ,IAAAA,KAAK,CAACK,MAAN,CAAaC,OAAb,CAAqB,CAACC,aAAD,EAAgBC,KAAhB,KACjBJ,YAAY,CAACK,IAAb,eACI,QAAC,aAAD;AACI,MAAA,gBAAgB,EAAIP,gBADxB,CAC0C;AAD1C;AAGI,MAAA,KAAK,EAAEK,aAAa,CAACG,WAHzB;AAAA,8BAII,QAAC,aAAD;AACI,QAAA,SAAS,EAAEH,aAAa,CAACI,UAD7B;AAEI,QAAA,SAAS,EAAEJ,aAAa,CAACK,UAF7B;AAGI,QAAA,OAAO,EAAEL,aAAa,CAACM;AAH3B;AAAA;AAAA;AAAA;AAAA,cAJJ,eASI,QAAC,SAAD;AACI,QAAA,KAAK,EAAEN,aAAa,CAACG,WADzB;AAEI,QAAA,WAAW,EAAEH,aAAa,CAACO;AAF/B;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA,OAESN,KAFT;AAAA;AAAA;AAAA;AAAA,YADJ,CADJ;AAkBA,WAAOJ,YAAP;AACH,GAzBD,CAT6B,CAoC7B;;;AACA,MAAIJ,KAAK,CAACK,MAAN,CAAaU,MAAb,GAAsB,CAA1B,EAA6B;AACzB,wBACI;AAAA,mCACI,QAAC,aAAD;AAAe,QAAA,WAAW,EAAEd;AAA5B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,kBACKE,cAAc;AADnB;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,oBADJ;AAQH,GATD,MASO;AACH,wBAAO;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AAEJ,CAlDD;;GAAMJ,a;;KAAAA,a;AAoDN,eAAeA,aAAf","sourcesContent":["import './EventsListing.css';\n// import EventDateTime from \"./EventDateTime\";\n// import EventInfo from \"./EventInfo\";\n// import EventInstance from \"./EventInstance\";\nimport StarredEvents from \"./StarredEvents\";\nimport {useState} from \"react\";\n\nconst EventsListing = (props) => {\n\n    const [starredEvents, setStarredEvents] = useState([])\n\n    /**\n     * Creates an array where each item is the JSX \"markup\" for an event.\n     *\n     * @returns {*[]}\n     */\n    const generateEvents = () => {\n        // Initialize an empty array that will get each event\n        const eventsToShow = [];\n\n        // Loop through the event list. Add each event as new array item.\n        // If React sees an array of JSX \"markup\", it will render each one.\n        props.events.forEach((eventInstance, index) =>\n            eventsToShow.push(\n                <EventInstance\n                    setStarredEvents = {setStarredEvents} //will be passing down to EventInstance\n                    key={index}\n                    title={eventInstance.event_title}>\n                    <EventDateTime\n                        dateStart={eventInstance.date_start}\n                        timeStart={eventInstance.time_start}\n                        timeEnd={eventInstance.time_end}\n                    />\n                    <EventInfo\n                        title={eventInstance.event_title}\n                        description={eventInstance.description}\n                    />\n                </EventInstance>\n            )\n        );\n        return eventsToShow;\n    }\n\n    //API 다운로딩할때 로딩화면\n    if (props.events.length > 0) {\n        return (\n            <> {/*fake tag! since React 는 sibling 태그를 어떻게 처리해야하는지 모름. 그래서 <> </> (fake tag) 로 묶어줘야함. */}\n                <StarredEvents starredList={starredEvents} />\n                <div className='events'>\n                    {generateEvents()}\n                </div>\n            </>\n        );\n    } else {\n        return <h2 className='events--loading'>LOADING!!</h2>\n    }\n\n}\n\nexport default EventsListing;"]},"metadata":{},"sourceType":"module"}