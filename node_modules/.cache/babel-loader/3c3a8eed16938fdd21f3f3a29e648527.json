{"ast":null,"code":"var _jsxFileName = \"/Users/jiyoon/code/react-rhyme-finder/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState, useRef, useEffect } from \"react\";\nimport EventsListing from \"./components/EventsListing\";\nimport StarredEvents from \"./components/StarredEvents\";\nimport NumSyllableGroup from \"./components/NumSyllableGroup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [umichEvents, setUmichEvents] = useState([]);\n  const [starredEvents, setStarredEvents] = useState([]);\n  const [isShowRhymingWordsBtn, setIsShowRhymingWordsBt] = useState(false);\n  const [isShowSynonymsBtn, setIsShowSynonymsBtn] = useState(false);\n  const inputRef = useRef(); //\n  // function groupBy(objects, property) {\n  //     // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n  //     // value for property (obj[property])\n  //     if(typeof property !== 'function') {\n  //         const propName = property;\n  //         property = (obj) => obj[propName];\n  //     }\n  //\n  //     const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n  //     for(const object of objects) {\n  //         const groupName = property(object);\n  //         //Make sure that the group exists\n  //         if(!groupedObjects.has(groupName)) {\n  //             groupedObjects.set(groupName, []);\n  //         }\n  //         groupedObjects.get(groupName).push(object);\n  //     }\n  //\n  //     // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n  //     const result = {};\n  //     for(const key of Array.from(groupedObjects.keys()).sort()) {\n  //         result[key] = groupedObjects.get(key);\n  //     }\n  //     return result;\n  // }\n\n  function showRhymingWordsBtn() {\n    setIsShowRhymingWordsBt(true);\n    setIsShowSynonymsBtn(false);\n    console.log('input: ', inputRef.current.value);\n    fetch(`https://api.datamuse.com/words?rel_rhy=${inputRef.current.value}`).then(response => response.json()).then(json => setUmichEvents(Object.values(json)));\n  } //\n  // console.log(umichEvents)\n  // const length = Object.keys(groupBy(umichEvents, 'numSyllables')).length;\n  // const groupby = groupBy(umichEvents, 'numSyllables')\n  // const length = Object.keys(groupby).length;\n\n\n  function showSynonymsBtn() {\n    setIsShowRhymingWordsBt(false);\n    setIsShowSynonymsBtn(true);\n    fetch(`https://api.datamuse.com/words?ml=${inputRef.current.value}`).then(response => response.json()).then(json => setUmichEvents(Object.values(json)));\n  }\n\n  const keyDownHandler = e => {\n    if (e.key === 'Enter') {\n      showRhymingWordsBtn();\n    }\n  }; // console.log(umichEvents)\n\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"row\",\n      children: \"React Rhyme Finder (579 Problem Set 6)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), starredEvents.join(', '), /*#__PURE__*/_jsxDEV(StarredEvents, {\n      starredList: starredEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputRef // value={taskDescription}\n        // onChange={(e) => setTaskDescription(e.target.value)}\n        ,\n        className: \"form-control w-25\",\n        type: \"text\",\n        placeholder: \"Enter a word\",\n        \"aria-label\": \"Enter a word\",\n        onKeyDown: keyDownHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showRhymingWordsBtn,\n        className: \"btn btn-primary\",\n        \"aria-label\": \"Show rhyming words\",\n        children: \"Show rhyming words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showSynonymsBtn,\n        className: \"btn btn-secondary\",\n        \"aria-label\": \"Show synonyms\",\n        children: \"Show synonyms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: isShowRhymingWordsBtn ? `Words that rhyme with ` + inputRef.current.value + `: ` : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: isShowSynonymsBtn ? `Words with a similar meaning to ` + inputRef.current.value + `: ` : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(EventsListing, {\n        events: umichEvents // task={item.task}\n        // timestamp={item.timestamp}\n        // created={item.created}\n        // key={item.created}\n        // remove={() => removeTodoItem(item.created)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"HvFeM5U8Gx2GBUM94A4NnFq6rk8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jiyoon/code/react-rhyme-finder/src/App.js"],"names":["logo","useState","useRef","useEffect","EventsListing","StarredEvents","NumSyllableGroup","App","umichEvents","setUmichEvents","starredEvents","setStarredEvents","isShowRhymingWordsBtn","setIsShowRhymingWordsBt","isShowSynonymsBtn","setIsShowSynonymsBtn","inputRef","showRhymingWordsBtn","console","log","current","value","fetch","then","response","json","Object","values","showSynonymsBtn","keyDownHandler","e","key","join"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport {useState, useRef, useEffect} from \"react\";\nimport EventsListing from \"./components/EventsListing\";\nimport StarredEvents from \"./components/StarredEvents\";\nimport NumSyllableGroup from \"./components/NumSyllableGroup\";\n\n\nfunction App() {\n    const [umichEvents, setUmichEvents] = useState([]);\n    const [starredEvents, setStarredEvents] = useState([])\n    const [isShowRhymingWordsBtn, setIsShowRhymingWordsBt] = useState(false);\n    const [isShowSynonymsBtn, setIsShowSynonymsBtn] = useState(false);\n\n    const inputRef = useRef();\n\n    //\n    // function groupBy(objects, property) {\n    //     // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n    //     // value for property (obj[property])\n    //     if(typeof property !== 'function') {\n    //         const propName = property;\n    //         property = (obj) => obj[propName];\n    //     }\n    //\n    //     const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n    //     for(const object of objects) {\n    //         const groupName = property(object);\n    //         //Make sure that the group exists\n    //         if(!groupedObjects.has(groupName)) {\n    //             groupedObjects.set(groupName, []);\n    //         }\n    //         groupedObjects.get(groupName).push(object);\n    //     }\n    //\n    //     // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n    //     const result = {};\n    //     for(const key of Array.from(groupedObjects.keys()).sort()) {\n    //         result[key] = groupedObjects.get(key);\n    //     }\n    //     return result;\n    // }\n\n\n    function showRhymingWordsBtn() {\n        setIsShowRhymingWordsBt(true)\n        setIsShowSynonymsBtn(false)\n        console.log('input: ', inputRef.current.value)\n\n        fetch(`https://api.datamuse.com/words?rel_rhy=${inputRef.current.value}`)\n            .then((response) => response.json())\n            .then((json) => setUmichEvents(Object.values(json)));\n    }\n\n    //\n    // console.log(umichEvents)\n    // const length = Object.keys(groupBy(umichEvents, 'numSyllables')).length;\n    // const groupby = groupBy(umichEvents, 'numSyllables')\n    // const length = Object.keys(groupby).length;\n\n    function showSynonymsBtn() {\n        setIsShowRhymingWordsBt(false)\n        setIsShowSynonymsBtn(true)\n\n        fetch(`https://api.datamuse.com/words?ml=${inputRef.current.value}`)\n            .then((response) => response.json())\n            .then((json) => setUmichEvents(Object.values(json)));\n    }\n\n    const keyDownHandler = (e) => {\n        if (e.key === 'Enter') {\n            showRhymingWordsBtn()\n        }\n    }\n\n    // console.log(umichEvents)\n\n    return (\n      <main className=\"container\">\n        <h1 className=\"row\">React Rhyme Finder (579 Problem Set 6)</h1>\n\n          {starredEvents.join(', ')}\n          {/*<div className=\"row\">*/}\n          {/*    <div className=\"col\">Saved words: <span></span></div>*/}\n          {/*</div>*/}\n\n          <StarredEvents starredList={starredEvents} />\n\n          <div className=\"input-group\">\n              <input\n                  ref = {inputRef}\n                  // value={taskDescription}\n                  // onChange={(e) => setTaskDescription(e.target.value)}\n                  className=\"form-control w-25\"\n                  type=\"text\"\n                  placeholder=\"Enter a word\"\n                  aria-label=\"Enter a word\"\n                  onKeyDown={keyDownHandler}\n                  />\n              <button\n                  onClick={showRhymingWordsBtn}\n                  className=\"btn btn-primary\"\n                  aria-label=\"Show rhyming words\">\n                  Show rhyming words\n              </button>\n              <button\n                  onClick={showSynonymsBtn}\n                  className=\"btn btn-secondary\"\n                  aria-label=\"Show synonyms\">\n                  Show synonyms\n              </button>\n          </div>\n\n          <span>{isShowRhymingWordsBtn ? `Words that rhyme with ` + inputRef.current.value + `: ` : ''}</span>\n          {/*<span>{umichEvents ? '' : '(no results)'}</span>*/}\n          <span>{isShowSynonymsBtn ? `Words with a similar meaning to `+ inputRef.current.value + `: ` : ''}</span>\n\n\n          {/*<span>{syllables()}</span>*/}\n        <div className=\"row\">\n          {/*{umichEvents.map((item) =>*/}\n\n              <EventsListing events={umichEvents}\n\n                  // task={item.task}\n                  // timestamp={item.timestamp}\n                  // created={item.created}\n                  // key={item.created}\n                  // remove={() => removeTodoItem(item.created)}\n              />\n          {/*)}*/}\n        </div>\n      </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}