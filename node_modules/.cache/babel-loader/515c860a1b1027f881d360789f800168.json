{"ast":null,"code":"var _jsxFileName = \"/Users/jiyoon/code/react-rhyme-finder/src/components/EventsListing.js\",\n    _s = $RefreshSig$();\n\n// import './EventsListing.css';\n// import EventDateTime from \"./EventDateTime\";\nimport EventInfo from \"./EventInfo\";\nimport EventInstance from \"./EventInstance\";\nimport StarredEvents from \"./StarredEvents\";\nimport { useState } from \"react\";\nimport NumSyllableGroup from \"./NumSyllableGroup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EventsListing = props => {\n  _s();\n\n  const [starredEvents, setStarredEvents] = useState([]);\n\n  const group = () => {};\n\n  const generateEvents = () => {\n    // Initialize an empty array that will get each event\n    // for (let m = 0 ; m<length; m++) {\n    //     console.log('Syllable: ', Object.keys(groupby)[m])\n    //     // console.log(Object.keys(groupBy(props.events, 'numSyllables')))\n    //     for (let item in groupby[Object.keys(groupby)[m]]) {\n    //         console.log(groupby[Object.keys(groupby)[m]][item])\n    //     }\n    // }\n    const eventsToShow = [];\n\n    for (let n = 0; n < length; n++) {\n      // for (let item in groupby[Object.keys(groupby)[n]]) {\n      //     console.log(groupby[Object.keys(groupby)[n]][item])\n      // }\n      groupby[Object.keys(groupby)[n]].forEach((eventInstance, index) => eventsToShow.push( /*#__PURE__*/_jsxDEV(EventInstance, {\n        setStarredEvents: setStarredEvents //will be passing down to EventInstance\n        ,\n        title: eventInstance.word,\n        children: /*#__PURE__*/_jsxDEV(EventInfo, {\n          title: eventInstance.word // description={eventInstance.description}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this)));\n    } // Loop through the event list. Add each event as new array item.\n    // If React sees an array of JSX \"markup\", it will render each one.\n    // props.events.forEach((eventInstance, index) =>\n    //     eventsToShow.push(\n    //         <EventInstance\n    //             setStarredEvents = {setStarredEvents} //will be passing down to EventInstance\n    //             key={index}\n    //             title={eventInstance.word}\n    //         >\n    //             <EventInfo\n    //                 title={eventInstance.word}\n    //                 // description={eventInstance.description}\n    //             />\n    //         </EventInstance>\n    //     )\n    // );\n    // for (let i=0; i<length; i++) {\n    //     return eventsToShow[i]\n    // }\n\n\n    return eventsToShow;\n  };\n  /**\n   * Creates an array where each item is the JSX \"markup\" for an event.\n   *\n   * @returns {*[]}\n   */\n  //API 다운로딩할때 로딩화면\n\n\n  if (props.events.length > 0) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"events\",\n        children: generateEvents()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"events--loading\",\n      children: \"LOADING!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 16\n    }, this);\n  }\n};\n\n_s(EventsListing, \"Dq45SMenU2fujsvcnJLyxQYjdcY=\");\n\n_c = EventsListing;\nexport default EventsListing;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventsListing\");","map":{"version":3,"sources":["/Users/jiyoon/code/react-rhyme-finder/src/components/EventsListing.js"],"names":["EventInfo","EventInstance","StarredEvents","useState","NumSyllableGroup","EventsListing","props","starredEvents","setStarredEvents","group","generateEvents","eventsToShow","n","length","groupby","Object","keys","forEach","eventInstance","index","push","word","events"],"mappings":";;;AAAA;AACA;AACA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,EAAD,CAAlD;;AAIA,QAAMM,KAAK,GAAG,MAAM,CAEnB,CAFD;;AAIA,QAAMC,cAAc,GAAG,MAAM;AACzB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGD,UAAMC,YAAY,GAAG,EAArB;;AAEC,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACC,MAAhB,EAAwBD,CAAC,EAAzB,EAA6B;AACzB;AACA;AACA;AAEAE,MAAAA,OAAO,CAACC,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBF,CAArB,CAAD,CAAP,CAAiCK,OAAjC,CAAyC,CAACC,aAAD,EAAgBC,KAAhB,KAErCR,YAAY,CAACS,IAAb,eACI,QAAC,aAAD;AACI,QAAA,gBAAgB,EAAIZ,gBADxB,CAC0C;AAD1C;AAGI,QAAA,KAAK,EAAEU,aAAa,CAACG,IAHzB;AAAA,+BAKI,QAAC,SAAD;AACI,UAAA,KAAK,EAAEH,aAAa,CAACG,IADzB,CAEI;;AAFJ;AAAA;AAAA;AAAA;AAAA;AALJ,SAESF,KAFT;AAAA;AAAA;AAAA;AAAA,cADJ,CAFJ;AAeH,KApCwB,CAsCzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA,WAAOR,YAAP;AACH,GA3DD;AA8DA;AACJ;AACA;AACA;AACA;AAII;;;AACA,MAAIL,KAAK,CAACgB,MAAN,CAAaT,MAAb,GAAsB,CAA1B,EAA6B;AACzB,wBACI;AAAA,6BAEI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,kBAGKH,cAAc;AAHnB;AAAA;AAAA;AAAA;AAAA;AAFJ,qBADJ;AAuBH,GAxBD,MAwBO;AACH,wBAAO;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AAEJ,CA5GD;;GAAML,a;;KAAAA,a;AA8GN,eAAeA,aAAf","sourcesContent":["// import './EventsListing.css';\n// import EventDateTime from \"./EventDateTime\";\nimport EventInfo from \"./EventInfo\";\nimport EventInstance from \"./EventInstance\";\nimport StarredEvents from \"./StarredEvents\";\nimport {useState} from \"react\";\nimport NumSyllableGroup from \"./NumSyllableGroup\";\n\nconst EventsListing = (props) => {\n    const [starredEvents, setStarredEvents] = useState([])\n\n\n\n    const group = () => {\n\n    }\n\n    const generateEvents = () => {\n        // Initialize an empty array that will get each event\n\n\n\n        // for (let m = 0 ; m<length; m++) {\n        //     console.log('Syllable: ', Object.keys(groupby)[m])\n        //     // console.log(Object.keys(groupBy(props.events, 'numSyllables')))\n        //     for (let item in groupby[Object.keys(groupby)[m]]) {\n        //         console.log(groupby[Object.keys(groupby)[m]][item])\n        //     }\n        // }\n\n\n       const eventsToShow = [];\n\n        for (let n=0; n<length; n++) {\n            // for (let item in groupby[Object.keys(groupby)[n]]) {\n            //     console.log(groupby[Object.keys(groupby)[n]][item])\n            // }\n\n            groupby[Object.keys(groupby)[n]].forEach((eventInstance, index) =>\n\n                eventsToShow.push(\n                    <EventInstance\n                        setStarredEvents = {setStarredEvents} //will be passing down to EventInstance\n                        key={index}\n                        title={eventInstance.word}\n                    >\n                        <EventInfo\n                            title={eventInstance.word}\n                            // description={eventInstance.description}\n                        />\n                    </EventInstance>\n                )\n            )\n        }\n\n        // Loop through the event list. Add each event as new array item.\n        // If React sees an array of JSX \"markup\", it will render each one.\n        // props.events.forEach((eventInstance, index) =>\n        //     eventsToShow.push(\n        //         <EventInstance\n        //             setStarredEvents = {setStarredEvents} //will be passing down to EventInstance\n        //             key={index}\n        //             title={eventInstance.word}\n        //         >\n        //             <EventInfo\n        //                 title={eventInstance.word}\n        //                 // description={eventInstance.description}\n        //             />\n        //         </EventInstance>\n        //     )\n        // );\n\n        // for (let i=0; i<length; i++) {\n        //     return eventsToShow[i]\n        // }\n        return eventsToShow;\n    }\n\n\n    /**\n     * Creates an array where each item is the JSX \"markup\" for an event.\n     *\n     * @returns {*[]}\n     */\n\n\n\n    //API 다운로딩할때 로딩화면\n    if (props.events.length > 0) {\n        return (\n            <>\n                {/*<StarredEvents starredList={starredEvents} />*/}\n                <div className='events'>\n\n\n                    {generateEvents()}\n                    {/*    {props.events.map((eventInstance, index) => (*/}\n                    {/*        <li>*/}\n                    {/*            {eventInstance.word}*/}\n                    {/*            <button*/}\n                    {/*                className=\"btn btn-sm btn-outline-success done\"*/}\n                    {/*                type=\"button\"*/}\n                    {/*                // onClick={remove}*/}\n                    {/*            >*/}\n                    {/*                (save)*/}\n                    {/*            </button>*/}\n                    {/*        </li>*/}\n                    {/*        )*/}\n                    {/*    )}*/}\n                </div>\n            </>\n        );\n    } else {\n        return <h2 className='events--loading'>LOADING!!</h2>\n    }\n\n}\n\nexport default EventsListing;"]},"metadata":{},"sourceType":"module"}