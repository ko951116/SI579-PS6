{"ast":null,"code":"var _jsxFileName = \"/Users/jiyoon/code/react-rhyme-finder/src/components/NumSyllableGroup.js\",\n    _s = $RefreshSig$();\n\n// import './EventsListing.css';\n// import EventDateTime from \"./EventDateTime\";\nimport EventInfo from \"./EventInfo\";\nimport EventInstance from \"./EventInstance\";\nimport StarredEvents from \"./StarredEvents\";\nimport { useState } from \"react\";\nimport EventsListing from \"./EventsListing\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NumSyllableGroup = props => {\n  _s();\n\n  const [starredEvents, setStarredEvents] = useState([]);\n  const [numSyllable, SetNumSyllable] = useState([]);\n  /**\n   * Creates an array where each item is the JSX \"markup\" for an event.\n   *\n   * @returns {*[]}\n   */\n\n  const generateEvents = () => {\n    // Initialize an empty array that will get each event\n    const eventsToShow = []; // Loop through the event list. Add each event as new array item.\n    // If React sees an array of JSX \"markup\", it will render each one.\n\n    props.events.forEach((eventInstance, index) => eventsToShow.push( /*#__PURE__*/_jsxDEV(EventInstance, {\n      setStarredEvents: setStarredEvents //will be passing down to EventInstance\n      ,\n      title: eventInstance.word,\n      children: /*#__PURE__*/_jsxDEV(EventInfo, {\n        title: eventInstance.word // description={eventInstance.description}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this)));\n    return eventsToShow;\n  };\n\n  for (let j = 0; j < 3; j++) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  } //API 다운로딩할때 로딩화면\n\n\n  if (props.events.length > 0) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"events\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(EventsListing, {\n            numSyllable: numSyllable\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"events--loading\",\n      children: \"LOADING!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 16\n    }, this);\n  }\n};\n\n_s(NumSyllableGroup, \"Hk3p/lM6YtVOCRFCFx6uwoOWKZM=\");\n\n_c = NumSyllableGroup;\nexport default NumSyllableGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"NumSyllableGroup\");","map":{"version":3,"sources":["/Users/jiyoon/code/react-rhyme-finder/src/components/NumSyllableGroup.js"],"names":["EventInfo","EventInstance","StarredEvents","useState","EventsListing","NumSyllableGroup","props","starredEvents","setStarredEvents","numSyllable","SetNumSyllable","generateEvents","eventsToShow","events","forEach","eventInstance","index","push","word","j","length"],"mappings":";;;AAAA;AACA;AACA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AAChC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AAEA;AACJ;AACA;AACA;AACA;;AAII,QAAMQ,cAAc,GAAG,MAAM;AACzB;AACA,UAAMC,YAAY,GAAG,EAArB,CAFyB,CAMzB;AACA;;AACAN,IAAAA,KAAK,CAACO,MAAN,CAAaC,OAAb,CAAqB,CAACC,aAAD,EAAgBC,KAAhB,KACjBJ,YAAY,CAACK,IAAb,eACI,QAAC,aAAD;AACI,MAAA,gBAAgB,EAAIT,gBADxB,CAC0C;AAD1C;AAGI,MAAA,KAAK,EAAEO,aAAa,CAACG,IAHzB;AAAA,6BAKI,QAAC,SAAD;AACI,QAAA,KAAK,EAAEH,aAAa,CAACG,IADzB,CAEI;;AAFJ;AAAA;AAAA;AAAA;AAAA;AALJ,OAESF,KAFT;AAAA;AAAA;AAAA;AAAA,YADJ,CADJ;AAcA,WAAOJ,YAAP;AACH,GAvBD;;AA0BA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAE,CAAnB,EAAsBA,CAAC,EAAvB,EAA2B;AACvB,wBACI;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AADJ,qBADJ;AAMH,GA7C+B,CA+ChC;;;AACA,MAAIb,KAAK,CAACO,MAAN,CAAaO,MAAb,GAAsB,CAA1B,EAA6B;AACzB,wBACI;AAAA,6BAEI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BAEI;AAAA,iCAGI,QAAC,aAAD;AAAe,YAAA,WAAW,EAAEX;AAA5B;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AAFJ,qBADJ;AA4BH,GA7BD,MA6BO;AACH,wBAAO;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AAEJ,CAjFD;;GAAMJ,gB;;KAAAA,gB;AAmFN,eAAeA,gBAAf","sourcesContent":["// import './EventsListing.css';\n// import EventDateTime from \"./EventDateTime\";\nimport EventInfo from \"./EventInfo\";\nimport EventInstance from \"./EventInstance\";\nimport StarredEvents from \"./StarredEvents\";\nimport {useState} from \"react\";\nimport EventsListing from \"./EventsListing\";\n\nconst NumSyllableGroup = (props) => {\n    const [starredEvents, setStarredEvents] = useState([])\n    const [numSyllable, SetNumSyllable] = useState([])\n\n    /**\n     * Creates an array where each item is the JSX \"markup\" for an event.\n     *\n     * @returns {*[]}\n     */\n\n\n\n    const generateEvents = () => {\n        // Initialize an empty array that will get each event\n        const eventsToShow = [];\n\n\n\n        // Loop through the event list. Add each event as new array item.\n        // If React sees an array of JSX \"markup\", it will render each one.\n        props.events.forEach((eventInstance, index) =>\n            eventsToShow.push(\n                <EventInstance\n                    setStarredEvents = {setStarredEvents} //will be passing down to EventInstance\n                    key={index}\n                    title={eventInstance.word}\n                >\n                    <EventInfo\n                        title={eventInstance.word}\n                        // description={eventInstance.description}\n                    />\n                </EventInstance>\n            )\n        );\n        return eventsToShow;\n    }\n\n\n    for (let j = 0; j <3; j++) {\n        return (\n            <>\n                <h2></h2>\n            </>\n        )\n\n    }\n\n    //API 다운로딩할때 로딩화면\n    if (props.events.length > 0) {\n        return (\n            <>\n                {/*<StarredEvents starredList={starredEvents} />*/}\n                <div className='events'>\n\n                    <ul >\n                        {/*<span>{isShowRhymingWordsBtn ? `Words that rhyme with ` + inputRef.current.value + `: ` : ''}</span>*/}\n\n                        <EventsListing numSyllable={numSyllable}/>\n                        {/*{generateEvents()}*/}\n                        {/*    {props.events.map((eventInstance, index) => (*/}\n                        {/*        <li>*/}\n                        {/*            {eventInstance.word}*/}\n                        {/*            <button*/}\n                        {/*                className=\"btn btn-sm btn-outline-success done\"*/}\n                        {/*                type=\"button\"*/}\n                        {/*                // onClick={remove}*/}\n                        {/*            >*/}\n                        {/*                (save)*/}\n                        {/*            </button>*/}\n                        {/*        </li>*/}\n                        {/*        )*/}\n                        {/*    )}*/}\n                    </ul>\n\n                </div>\n            </>\n        );\n    } else {\n        return <h2 className='events--loading'>LOADING!!</h2>\n    }\n\n}\n\nexport default NumSyllableGroup;"]},"metadata":{},"sourceType":"module"}