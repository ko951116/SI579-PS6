{"ast":null,"code":"var _jsxFileName = \"/Users/jiyoon/code/react-rhyme-finder/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState, useRef, useEffect } from \"react\";\nimport InputGroup from \"./components/InputGroup\";\nimport TodoItem from \"./components/TodoItem\";\nimport EventsListing from \"./components/EventsListing\";\nimport StarredEvents from \"./components/StarredEvents\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  let defaultTodoItems = [{\n    task: 'laundry',\n    created: 1647999964830\n  }];\n  const [umichEvents, setUmichEvents] = useState([]);\n  const [todoItems, setTodoItems] = useState(defaultTodoItems);\n  const [starredEvents, setStarredEvents] = useState([]);\n  const [isShowRhymingWordsBtn, setIsShowRhymingWordsBt] = useState(false);\n  const [isShowSynonymsBtn, setIsShowSynonymsBtn] = useState(false);\n  const inputRef = useRef();\n\n  const removeTodoItem = created => {\n    setTodoItems(previousTodoItems => {\n      // Keep all items that dont match `timestamp`.\n      const withItemRemoved = previousTodoItems.filter(item => {\n        return item.created !== created;\n      });\n      localStorage.setItem('my-todo-items', JSON.stringify(withItemRemoved));\n      return withItemRemoved;\n    });\n  };\n\n  function groupBy(objects, property) {\n    // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n    // value for property (obj[property])\n    if (typeof property !== 'function') {\n      const propName = property;\n\n      property = obj => obj[propName];\n    }\n\n    const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n\n    for (const object of objects) {\n      const groupName = property(object); //Make sure that the group exists\n\n      if (!groupedObjects.has(groupName)) {\n        groupedObjects.set(groupName, []);\n      }\n\n      groupedObjects.get(groupName).push(object);\n    } // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n\n\n    const result = {};\n\n    for (const key of Array.from(groupedObjects.keys()).sort()) {\n      result[key] = groupedObjects.get(key);\n    }\n\n    return result;\n  }\n\n  function showRhymingWordsBtn() {\n    setIsShowRhymingWordsBt(true);\n    setIsShowSynonymsBtn(false);\n    console.log('input: ', inputRef.current.value);\n    fetch(`https://api.datamuse.com/words?rel_rhy=${inputRef.current.value}`).then(response => response.json()).then(json => setUmichEvents(Object.values(json)));\n  } // console.log(umichEvents)\n\n\n  const length = Object.keys(groupBy(umichEvents, 'numSyllables')).length; // console.log(length)\n\n  const syllables = () => {\n    for (let m = 0; m < length; m++) {\n      console.log(Object.keys(groupBy(umichEvents, 'numSyllables'))[m]);\n      return `\\nSyllables: ${Object.keys(groupBy(umichEvents, 'numSyllables'))[m]}`;\n    }\n  };\n\n  function showSynonymsBtn() {\n    setIsShowRhymingWordsBt(false);\n    setIsShowSynonymsBtn(true);\n    fetch(`https://api.datamuse.com/words?ml=${inputRef.current.value}`).then(response => response.json()).then(json => setUmichEvents(Object.values(json)));\n  }\n\n  const keyDownHandler = e => {\n    if (e.key === 'Enter') {\n      showRhymingWordsBtn();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"row\",\n      children: \"React Rhyme Finder (579 Problem Set 6)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(StarredEvents, {\n      starredList: starredEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputRef // value={taskDescription}\n        // onChange={(e) => setTaskDescription(e.target.value)}\n        ,\n        className: \"form-control w-25\",\n        type: \"text\",\n        placeholder: \"Enter a word\",\n        \"aria-label\": \"Enter a word\",\n        onKeyDown: keyDownHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showRhymingWordsBtn,\n        className: \"btn btn-primary\",\n        \"aria-label\": \"Show rhyming words\",\n        children: \"Show rhyming words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showSynonymsBtn,\n        className: \"btn btn-secondary\",\n        \"aria-label\": \"Show synonyms\",\n        children: \"Show synonyms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: isShowRhymingWordsBtn ? `Words that rhyme with ` + inputRef.current.value + `: ` : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: isShowSynonymsBtn ? `Words with a similar meaning to ` + inputRef.current.value + `: ` : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: syllables()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(EventsListing, {\n        events: umichEvents // task={item.task}\n        // timestamp={item.timestamp}\n        // created={item.created}\n        // key={item.created}\n        // remove={() => removeTodoItem(item.created)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"HfgqeYt573v5tasywl4BAP5JobM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jiyoon/code/react-rhyme-finder/src/App.js"],"names":["logo","useState","useRef","useEffect","InputGroup","TodoItem","EventsListing","StarredEvents","App","defaultTodoItems","task","created","umichEvents","setUmichEvents","todoItems","setTodoItems","starredEvents","setStarredEvents","isShowRhymingWordsBtn","setIsShowRhymingWordsBt","isShowSynonymsBtn","setIsShowSynonymsBtn","inputRef","removeTodoItem","previousTodoItems","withItemRemoved","filter","item","localStorage","setItem","JSON","stringify","groupBy","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","push","result","key","Array","from","keys","sort","showRhymingWordsBtn","console","log","current","value","fetch","then","response","json","Object","values","length","syllables","m","showSynonymsBtn","keyDownHandler","e"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport {useState, useRef, useEffect} from \"react\";\nimport InputGroup from \"./components/InputGroup\";\nimport TodoItem from \"./components/TodoItem\";\nimport EventsListing from \"./components/EventsListing\";\nimport StarredEvents from \"./components/StarredEvents\";\n\n\nfunction App() {\n    let defaultTodoItems = [\n        {\n            task: 'laundry',\n            created: 1647999964830,\n        }\n    ];\n    const [umichEvents, setUmichEvents] = useState([]);\n    const [todoItems, setTodoItems] = useState(defaultTodoItems);\n    const [starredEvents, setStarredEvents] = useState([])\n    const [isShowRhymingWordsBtn, setIsShowRhymingWordsBt] = useState(false);\n    const [isShowSynonymsBtn, setIsShowSynonymsBtn] = useState(false);\n\n    const inputRef = useRef();\n\n\n\n    const removeTodoItem = (created) => {\n        setTodoItems((previousTodoItems) => {\n            // Keep all items that dont match `timestamp`.\n            const withItemRemoved = previousTodoItems.filter((item) => {\n                return item.created !== created\n            });\n            localStorage.setItem('my-todo-items', JSON.stringify(withItemRemoved));\n\n            return withItemRemoved;\n        });\n    }\n\n    function groupBy(objects, property) {\n        // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n        // value for property (obj[property])\n        if(typeof property !== 'function') {\n            const propName = property;\n            property = (obj) => obj[propName];\n        }\n\n        const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n        for(const object of objects) {\n            const groupName = property(object);\n            //Make sure that the group exists\n            if(!groupedObjects.has(groupName)) {\n                groupedObjects.set(groupName, []);\n            }\n            groupedObjects.get(groupName).push(object);\n        }\n\n        // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n        const result = {};\n        for(const key of Array.from(groupedObjects.keys()).sort()) {\n            result[key] = groupedObjects.get(key);\n        }\n        return result;\n    }\n\n\n    function showRhymingWordsBtn() {\n        setIsShowRhymingWordsBt(true)\n        setIsShowSynonymsBtn(false)\n        console.log('input: ', inputRef.current.value)\n\n        fetch(`https://api.datamuse.com/words?rel_rhy=${inputRef.current.value}`)\n            .then((response) => response.json())\n            .then((json) => setUmichEvents(Object.values(json)));\n    }\n\n    // console.log(umichEvents)\n    const length = Object.keys(groupBy(umichEvents, 'numSyllables')).length;\n\n    // console.log(length)\n\n    const syllables = () => {\n        for (let m = 0; m<length; m++) {\n            console.log(Object.keys(groupBy(umichEvents, 'numSyllables'))[m])\n            return `\\nSyllables: ${Object.keys(groupBy(umichEvents, 'numSyllables'))[m]}`\n        }\n    }\n\n\n    function showSynonymsBtn() {\n        setIsShowRhymingWordsBt(false)\n        setIsShowSynonymsBtn(true)\n\n        fetch(`https://api.datamuse.com/words?ml=${inputRef.current.value}`)\n            .then((response) => response.json())\n            .then((json) => setUmichEvents(Object.values(json)));\n    }\n\n    const keyDownHandler = (e) => {\n        if (e.key === 'Enter') {\n            showRhymingWordsBtn()\n        }\n    }\n\n    return (\n      <main className=\"container\">\n        <h1 className=\"row\">React Rhyme Finder (579 Problem Set 6)</h1>\n\n          {/*<div className=\"row\">*/}\n          {/*    <div className=\"col\">Saved words: <span></span></div>*/}\n          {/*</div>*/}\n\n          <StarredEvents starredList={starredEvents} />\n\n          <div className=\"input-group\">\n              <input\n                  ref = {inputRef}\n                  // value={taskDescription}\n                  // onChange={(e) => setTaskDescription(e.target.value)}\n                  className=\"form-control w-25\"\n                  type=\"text\"\n                  placeholder=\"Enter a word\"\n                  aria-label=\"Enter a word\"\n                  onKeyDown={keyDownHandler}\n                  />\n              <button\n                  onClick={showRhymingWordsBtn}\n                  className=\"btn btn-primary\"\n                  aria-label=\"Show rhyming words\">\n                  Show rhyming words\n              </button>\n              <button\n                  onClick={showSynonymsBtn}\n                  className=\"btn btn-secondary\"\n                  aria-label=\"Show synonyms\">\n                  Show synonyms\n              </button>\n          </div>\n\n          <span>{isShowRhymingWordsBtn ? `Words that rhyme with ` + inputRef.current.value + `: ` : ''}</span>\n          <span>{isShowSynonymsBtn ? `Words with a similar meaning to `+ inputRef.current.value + `: ` : ''}</span>\n\n\n          <span>{syllables()}</span>\n        <ul className=\"row\">\n          {/*{umichEvents.map((item) =>*/}\n              <EventsListing events={umichEvents}\n                  // task={item.task}\n                  // timestamp={item.timestamp}\n                  // created={item.created}\n                  // key={item.created}\n                  // remove={() => removeTodoItem(item.created)}\n              />\n          {/*)}*/}\n        </ul>\n      </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}