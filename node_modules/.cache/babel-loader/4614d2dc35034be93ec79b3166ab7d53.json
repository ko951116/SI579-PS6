{"ast":null,"code":"var _jsxFileName = \"/Users/jiyoon/code/react-rhyme-finder/src/components/EventStarButton.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// import './EventStarButton.css';\nconst EventStarButton = props => {\n  const {\n    handMeDownSetStarStateFunction,\n    setStarredEvents,\n    title\n  } = props;\n\n  const getStarMessage = () => {\n    return '(save)';\n  };\n\n  const starButtonHandler = e => {\n    setStarredEvents(previousList => {\n      // if tossedOverIsStarred is TRUE, we are about to un-star it.\n      // remove the item from the list.\n      // Would also work\n      // previousList.push(title)\n      // return previousList\n      return [...previousList, title];\n    });\n    props.handMeDownSetStarStateFunction(previousValue => {\n      return !previousValue;\n    }); // setIsStarred(true); //이렇게 하면 클릭하면 무조건 U GOT STAR 로 바뀌고, 클리커블 하지 않음. 무조건 true 만 리턴하기 때문.\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: starButtonHandler,\n    className: \"btn btn-sm btn-outline-success done ${tossedOverIsStarred ? 'starred' : 'not-sarred'}\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: getStarMessage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_c = EventStarButton;\nexport default EventStarButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventStarButton\");","map":{"version":3,"sources":["/Users/jiyoon/code/react-rhyme-finder/src/components/EventStarButton.js"],"names":["EventStarButton","props","handMeDownSetStarStateFunction","setStarredEvents","title","getStarMessage","starButtonHandler","e","previousList","previousValue"],"mappings":";;;AAAA;AAEA,MAAMA,eAAe,GAAIC,KAAD,IAAW;AAE/B,QAAM;AAAEC,IAAAA,8BAAF;AAAkCC,IAAAA,gBAAlC;AAAoDC,IAAAA;AAApD,MAA6DH,KAAnE;;AAEA,QAAMI,cAAc,GAAG,MAAM;AAErB,WAAO,QAAP;AAEP,GAJD;;AAMA,QAAMC,iBAAiB,GAAIC,CAAD,IAAO;AAC7BJ,IAAAA,gBAAgB,CAAEK,YAAD,IAAkB;AAC/B;AACA;AAEI;AACA;AACA;AACA,aAAO,CAAE,GAAGA,YAAL,EAAmBJ,KAAnB,CAAP;AAEP,KATe,CAAhB;AAWAH,IAAAA,KAAK,CAACC,8BAAN,CAAsCO,aAAD,IAAmB;AACpD,aAAO,CAACA,aAAR;AACH,KAFD,EAZ6B,CAgB7B;AACH,GAjBD;;AAmBA,sBAEI;AAAQ,IAAA,OAAO,EAAEH,iBAAjB;AAAoC,IAAA,SAAS,EAAC,uFAA9C;AAAA,2BACI;AAAA,gBAAMD,cAAc;AAApB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UAFJ;AAMH,CAnCD;;KAAML,e;AAqCN,eAAeA,eAAf","sourcesContent":["// import './EventStarButton.css';\n\nconst EventStarButton = (props) => {\n\n    const { handMeDownSetStarStateFunction, setStarredEvents, title} = props;\n\n    const getStarMessage = () => {\n\n            return '(save)'\n\n    };\n\n    const starButtonHandler = (e) => {\n        setStarredEvents((previousList) => {\n            // if tossedOverIsStarred is TRUE, we are about to un-star it.\n            // remove the item from the list.\n\n                // Would also work\n                // previousList.push(title)\n                // return previousList\n                return [ ...previousList, title];\n\n        });\n\n        props.handMeDownSetStarStateFunction((previousValue) => {\n            return !previousValue;\n        });\n\n        // setIsStarred(true); //이렇게 하면 클릭하면 무조건 U GOT STAR 로 바뀌고, 클리커블 하지 않음. 무조건 true 만 리턴하기 때문.\n    };\n\n    return (\n\n        <button onClick={starButtonHandler} className=\"btn btn-sm btn-outline-success done ${tossedOverIsStarred ? 'starred' : 'not-sarred'}\">\n            <div>{getStarMessage()}</div>\n        </button>\n    );\n}\n\nexport default EventStarButton;"]},"metadata":{},"sourceType":"module"}